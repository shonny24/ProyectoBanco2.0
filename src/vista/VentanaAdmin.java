/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import logica.Ahorro;
import logica.Banco;
import logica.CDTs;
import logica.Cliente;
import logica.Corriente;
import logica.Nomina;

/**
 *
 * @author Shonny
 */
public class VentanaAdmin extends javax.swing.JFrame {

    private Banco miBanco;
    private CDTs miCDT;
    private Cliente miCliente;
    private boolean bandera;

    /**
     * Creates new form VentanaAdmin
     */
    public VentanaAdmin(Banco ban) {
        miBanco = ban;
        initComponents();
        setLocationRelativeTo(null);
//        this.setExtendedState(this.MAXIMIZED_BOTH);//MAXIMIZAR UNA VENTANA AL INICIAR LA APLICACION
//        llenarTablaClienteAdmin();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableAdminClientes = new javax.swing.JTable();
        jBEliminarCliente = new javax.swing.JButton();
        jBCrearClienteAdmin = new javax.swing.JButton();
        jBModificarClienteAdmin = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableAhorroAdmin = new javax.swing.JTable();
        jBModificarCuentaAhorroAdmin = new javax.swing.JButton();
        jBEliminarCuentaAhorroAdmin = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTableCorrienteAdmin = new javax.swing.JTable();
        jBModificarCuentaCorrienteAdmin = new javax.swing.JButton();
        jBEliminarCuentaCorrienteAdmin = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTableNominaAdmin = new javax.swing.JTable();
        jBModificarCuentaNominaAdmin = new javax.swing.JButton();
        jBEliminarCuentaNominaAdmin = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTableCDTAdmin = new javax.swing.JTable();
        jBModificarCuentaCDTAdmin = new javax.swing.JButton();
        jBEliminarCDTAdmin = new javax.swing.JButton();
        jBCrearCDTAdmin = new javax.swing.JButton();
        jBCrearCuentaAdm = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTableAdminEmpresa = new javax.swing.JTable();
        jBEliminarEmpresaAdmin = new javax.swing.JButton();
        jBCrearEmpresaAdmin = new javax.swing.JButton();
        jBModificarEmpresaAdmin = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jScrollPane8 = new javax.swing.JScrollPane();
        jTableNominaAdmin1 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Usuarios"));

        jTableAdminClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cedula", "Usuario", "Pregunta Seguridad", "Respuesta", "Permiso", "Nombres", "Apellidos", "Edad", "Sexo", "Email", "Fecha Nacimiento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, true, true, true, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAdminClientes.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAdminClientesMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableAdminClientes);
        if (jTableAdminClientes.getColumnModel().getColumnCount() > 0) {
            jTableAdminClientes.getColumnModel().getColumn(7).setHeaderValue("Edad");
            jTableAdminClientes.getColumnModel().getColumn(8).setHeaderValue("Sexo");
            jTableAdminClientes.getColumnModel().getColumn(9).setHeaderValue("Email");
            jTableAdminClientes.getColumnModel().getColumn(10).setHeaderValue("Fecha Nacimiento");
        }

        jBEliminarCliente.setText("Eliminar Cliente");
        jBEliminarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarClienteActionPerformed(evt);
            }
        });

        jBCrearClienteAdmin.setText("Crear Cliente");
        jBCrearClienteAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearClienteAdminActionPerformed(evt);
            }
        });

        jBModificarClienteAdmin.setText("Modificar Cliente");
        jBModificarClienteAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarClienteAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jBCrearClienteAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBModificarClienteAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(226, 226, 226)
                        .addComponent(jBEliminarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBCrearClienteAdmin)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBEliminarCliente)
                        .addComponent(jBModificarClienteAdmin)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuentas"));

        jTableAhorroAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Cuenta", "Monto", "Fecha Retiro", "Fecha Creaci√≥n"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableAhorroAdmin);

        jBModificarCuentaAhorroAdmin.setText("Modificar Cuenta");
        jBModificarCuentaAhorroAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarCuentaAhorroAdminActionPerformed(evt);
            }
        });

        jBEliminarCuentaAhorroAdmin.setText("Eliminar Cuenta");
        jBEliminarCuentaAhorroAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarCuentaAhorroAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jBModificarCuentaAhorroAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBEliminarCuentaAhorroAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBEliminarCuentaAhorroAdmin, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jBModificarCuentaAhorroAdmin, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Ahorros", jPanel5);

        jTableCorrienteAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Cuenta", "Monto", "Fecha Creaci√≥n"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTableCorrienteAdmin);

        jBModificarCuentaCorrienteAdmin.setText("Modificar Cuenta");
        jBModificarCuentaCorrienteAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarCuentaCorrienteAdminActionPerformed(evt);
            }
        });

        jBEliminarCuentaCorrienteAdmin.setText("Eliminar Cuenta");
        jBEliminarCuentaCorrienteAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarCuentaCorrienteAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jBModificarCuentaCorrienteAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBEliminarCuentaCorrienteAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBModificarCuentaCorrienteAdmin)
                    .addComponent(jBEliminarCuentaCorrienteAdmin))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Corriente", jPanel6);

        jTableNominaAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Cuenta", "Monto", "Nombre Empresa", "Fecha Creaci√≥n"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTableNominaAdmin);

        jBModificarCuentaNominaAdmin.setText("Modificar Cuenta");
        jBModificarCuentaNominaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarCuentaNominaAdminActionPerformed(evt);
            }
        });

        jBEliminarCuentaNominaAdmin.setText("Eliminar Cuenta");
        jBEliminarCuentaNominaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarCuentaNominaAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jBModificarCuentaNominaAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBEliminarCuentaNominaAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBModificarCuentaNominaAdmin)
                    .addComponent(jBEliminarCuentaNominaAdmin))
                .addContainerGap())
        );

        jTabbedPane2.addTab("Nomina", jPanel7);

        jTableCDTAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# de CDT", "Monto  inversi√≥n", "% de inter√©s", "Tipo mensual", "Fecha creaci√≥n"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTableCDTAdmin);

        jBModificarCuentaCDTAdmin.setText("Modificar Cuenta");
        jBModificarCuentaCDTAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarCuentaCDTAdminActionPerformed(evt);
            }
        });

        jBEliminarCDTAdmin.setText("Eliminar Cuenta");
        jBEliminarCDTAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarCDTAdminActionPerformed(evt);
            }
        });

        jBCrearCDTAdmin.setText("Crear CDT");
        jBCrearCDTAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearCDTAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1004, Short.MAX_VALUE)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jBModificarCuentaCDTAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBCrearCDTAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(215, 215, 215)
                        .addComponent(jBEliminarCDTAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBModificarCuentaCDTAdmin)
                    .addComponent(jBEliminarCDTAdmin)
                    .addComponent(jBCrearCDTAdmin))
                .addContainerGap())
        );

        jTabbedPane2.addTab("CDT", jPanel8);

        jBCrearCuentaAdm.setText("Crear Cuenta");
        jBCrearCuentaAdm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearCuentaAdmActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBCrearCuentaAdm, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(427, 427, 427))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jBCrearCuentaAdm)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Clientes", jPanel1);

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder("Empresas"));

        jTableAdminEmpresa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "NIT", "Razon social", "Usuario", "Contase√±a", "Pregunta Seguridad", "Respuesta", "Permiso"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, false, true, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableAdminEmpresa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableAdminEmpresaMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(jTableAdminEmpresa);

        jBEliminarEmpresaAdmin.setText("Eliminar Cliente");
        jBEliminarEmpresaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBEliminarEmpresaAdminActionPerformed(evt);
            }
        });

        jBCrearEmpresaAdmin.setText("Crear Cliente");
        jBCrearEmpresaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBCrearEmpresaAdminActionPerformed(evt);
            }
        });

        jBModificarEmpresaAdmin.setText("Modificar Cliente");
        jBModificarEmpresaAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBModificarEmpresaAdminActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(jBCrearEmpresaAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBModificarEmpresaAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(226, 226, 226)
                        .addComponent(jBEliminarEmpresaAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 163, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBCrearEmpresaAdmin)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jBEliminarEmpresaAdmin)
                        .addComponent(jBModificarEmpresaAdmin)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder("Cuentas"));

        jTableNominaAdmin1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "# Cuenta", "Monto", "Nombre Empresa", "Fecha Creaci√≥n"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(jTableNominaAdmin1);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 1029, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 206, Short.MAX_VALUE)
                .addGap(143, 143, 143))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Empresas", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBEliminarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarClienteActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int resp;
        String id;
        boolean eliminado;
        try {
            //selecciono una fila
            filSelec = jTableAdminClientes.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                resp = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar este Cliente?", "Eliminar", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.YES_OPTION) {
                    //obtengo el los datos de la columna 0
                    id = jTableAdminClientes.getValueAt(filSelec, 0).toString();
                    //llamo el metodo eliminar
                    eliminado = miBanco.eliminarCliente(id);

                    DefaultTableModel dtm = (DefaultTableModel) jTableAdminClientes.getModel();
                    dtm.removeRow(filSelec);

                    if (eliminado == true) {
                        JOptionPane.showMessageDialog(null, "El CLiente se elimino correctamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error!!! no se elimino");
                    }

                }
            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jBEliminarClienteActionPerformed

    private void jTableAdminClientesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAdminClientesMouseClicked
        // TODO add your handling code here:
        int filSelec;
        String id;
        filSelec = jTableAdminClientes.getSelectedRow();//obtiene la fila selccionada retorna -1 cuando no tiene selecionado nada
        //if para vericar el doble click de mouse
        if (evt.getClickCount() == 1 && filSelec != -1) {
            //obtengo los datos de la columna 0 y la fila seleccionada
            id = jTableAdminClientes.getValueAt(filSelec, 0).toString();
            //llamo la variable idPatido que esta en VentanaJugarPartido
            miCliente = miBanco.buscarCliente(id);
            llenarTablaAhorroAdmin(miCliente);
            llenarTablaCorrienteAdmin(miCliente);
            llenarTablaNominaAdmin(miCliente);
            llenarTablaCDTAdmin(miCliente);
            bandera = true;
        }
    }//GEN-LAST:event_jTableAdminClientesMouseClicked

    private void jBCrearClienteAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearClienteAdminActionPerformed
        // TODO add your handling code here:
        VentanaCrearClienteAdmin crearClienteAdmin = new VentanaCrearClienteAdmin(miBanco);
        crearClienteAdmin.setVisible(true);
    }//GEN-LAST:event_jBCrearClienteAdminActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        // TODO add your handling code here:
        llenarTablaClienteAdmin();
        if (bandera) {
            llenarTablaAhorroAdmin(miCliente);
            llenarTablaCorrienteAdmin(miCliente);
            llenarTablaNominaAdmin(miCliente);
            llenarTablaCDTAdmin(miCliente);
        }

    }//GEN-LAST:event_formWindowGainedFocus

    private void jBModificarClienteAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarClienteAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;

        String id;
        try {
            //selecciono una fila
            filSelec = jTableAdminClientes.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                //obtengo el los datos de la columna 0
                id = jTableAdminClientes.getValueAt(filSelec, 0).toString();
                //llamo el metodo eliminar
                VentanaModificarClienteAdmin ventanaModificarClienteAdmin = new VentanaModificarClienteAdmin(miBanco, id);
                ventanaModificarClienteAdmin.setVisible(true);

            }
        } catch (Exception e) {
        }
    }//GEN-LAST:event_jBModificarClienteAdminActionPerformed

    private void jBCrearCuentaAdmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearCuentaAdmActionPerformed
        // TODO add your handling code here:
        int filSelec;

        String id;
        try {
            //selecciono una fila
            filSelec = jTableAdminClientes.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla usuarios", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                //obtengo el los datos de la columna 0

                id = jTableAdminClientes.getValueAt(filSelec, 0).toString();
                VentanaCrearCuentaAdmin ventanaCrearCuentaAdmin = new VentanaCrearCuentaAdmin(miBanco, id);
                ventanaCrearCuentaAdmin.setVisible(true);

            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBCrearCuentaAdmActionPerformed

    private void jBModificarCuentaNominaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarCuentaNominaAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int filSelec2;

        String idCliente;
        String idCuenta;
        try {
            //selecciono una fila
            filSelec = jTableNominaAdmin.getSelectedRow();
            filSelec2 = jTableAdminClientes.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1 || filSelec2 == -1) {
                if (filSelec == -1) {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla cuenta de Nomina", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla clientes", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                //obtengo el los datos de la columna 0
                idCliente = jTableAdminClientes.getValueAt(filSelec2, 0).toString();
                idCuenta = jTableNominaAdmin.getValueAt(filSelec, 0).toString();

                VentanaModificarCuentaAdmin ventanaModificarCuentaAdmin = new VentanaModificarCuentaAdmin(miBanco, idCliente, idCuenta, false, false);
                ventanaModificarCuentaAdmin.setVisible(true);

            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBModificarCuentaNominaAdminActionPerformed

    private void jBEliminarCuentaAhorroAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarCuentaAhorroAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int resp;
        String id;
        boolean eliminado;
        try {
            //selecciono una fila
            filSelec = jTableAhorroAdmin.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla Ahorros", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                resp = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar esta cuenta (ahorros)?", "Eliminar", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.YES_OPTION) {
                    //obtengo el los datos de la columna 0
                    id = jTableAhorroAdmin.getValueAt(filSelec, 0).toString();
                    //llamo el metodo eliminar
                    eliminado = miCliente.eliminarCuentaAhorro(id);

                    DefaultTableModel dtm = (DefaultTableModel) jTableAhorroAdmin.getModel();
                    dtm.removeRow(filSelec);

                    if (eliminado == true) {
                        JOptionPane.showMessageDialog(null, "La cuenta se elimino correctamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error!!! no se elimino");
                    }

                }
            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }

    }//GEN-LAST:event_jBEliminarCuentaAhorroAdminActionPerformed

    private void jBModificarCuentaAhorroAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarCuentaAhorroAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int filSelec2;

        String idCliente;
        String idCuenta;
        try {
            //selecciono una fila
            filSelec = jTableAhorroAdmin.getSelectedRow();
            filSelec2 = jTableAdminClientes.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1 || filSelec2 == -1) {
                if (filSelec == -1) {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla Cuenta de ahorros", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla clientes", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                //obtengo el los datos de la columna 0
                idCliente = jTableAdminClientes.getValueAt(filSelec2, 0).toString();
                idCuenta = jTableAhorroAdmin.getValueAt(filSelec, 0).toString();

                VentanaModificarCuentaAdmin ventanaModificarCuentaAdmin = new VentanaModificarCuentaAdmin(miBanco, idCliente, idCuenta, true, false);
                ventanaModificarCuentaAdmin.setVisible(true);

            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBModificarCuentaAhorroAdminActionPerformed

    private void jBModificarCuentaCorrienteAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarCuentaCorrienteAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int filSelec2;

        String idCliente;
        String idCuenta;
        try {
            //selecciono una fila
            filSelec2 = jTableAdminClientes.getSelectedRow();
            filSelec = jTableCorrienteAdmin.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1 || filSelec2 == -1) {
                if (filSelec == -1) {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla Cuenta de corriente", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla clientes", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                //obtengo el los datos de la columna 0
                idCliente = jTableAdminClientes.getValueAt(filSelec2, 0).toString();
                idCuenta = jTableCorrienteAdmin.getValueAt(filSelec, 0).toString();

                VentanaModificarCuentaAdmin ventanaModificarCuentaAdmin = new VentanaModificarCuentaAdmin(miBanco, idCliente, idCuenta, false, true);
                ventanaModificarCuentaAdmin.setVisible(true);

            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBModificarCuentaCorrienteAdminActionPerformed

    private void jBModificarCuentaCDTAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarCuentaCDTAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int filSelec2;

        String idCliente;
        String idCuenta;
        try {
            //selecciono una fila
            filSelec2 = jTableAdminClientes.getSelectedRow();
            filSelec = jTableCDTAdmin.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1 || filSelec2 == -1) {
                if (filSelec == -1) {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla CDT", "Advertencia", JOptionPane.WARNING_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla clientes", "Advertencia", JOptionPane.WARNING_MESSAGE);
                }
            } else {
                //obtengo el los datos de la columna 0
                idCliente = jTableAdminClientes.getValueAt(filSelec2, 0).toString();
                idCuenta = jTableCDTAdmin.getValueAt(filSelec, 0).toString();

                VentanaModificarCDT ventanaModificarCDT = new VentanaModificarCDT(miBanco, idCliente, idCuenta);
                ventanaModificarCDT.setVisible(true);

            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBModificarCuentaCDTAdminActionPerformed

    private void jBCrearCDTAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearCDTAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;

        String id;
        try {
            //selecciono una fila
            filSelec = jTableAdminClientes.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla usuarios", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                //obtengo el los datos de la columna 0

                id = jTableAdminClientes.getValueAt(filSelec, 0).toString();
                VentanaCrearAdminCDT ventanaCrearAdminCDT = new VentanaCrearAdminCDT(miBanco, id);
                ventanaCrearAdminCDT.setVisible(true);

            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBCrearCDTAdminActionPerformed

    private void jBEliminarCDTAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarCDTAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int resp;
        String id;
        boolean eliminado;
        try {
            //selecciono una fila
            filSelec = jTableCDTAdmin.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla CDT", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                resp = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar esta cuenta (CDT)?", "Eliminar", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.YES_OPTION) {
                    //obtengo el los datos de la columna 0
                    id = jTableCDTAdmin.getValueAt(filSelec, 0).toString();
                    //llamo el metodo eliminar
                    eliminado = miCliente.eliminarCuentaCDT(id);

                    DefaultTableModel dtm = (DefaultTableModel) jTableCDTAdmin.getModel();
                    dtm.removeRow(filSelec);

                    if (eliminado == true) {
                        JOptionPane.showMessageDialog(null, "La cuenta se elimino correctamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error!!! no se elimino");
                    }

                }
            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBEliminarCDTAdminActionPerformed

    private void jBEliminarCuentaNominaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarCuentaNominaAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int resp;
        String id;
        boolean eliminado;
        try {
            //selecciono una fila
            filSelec = jTableNominaAdmin.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla nomina", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                resp = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar esta cuenta (nomina)?", "Eliminar", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.YES_OPTION) {
                    //obtengo el los datos de la columna 0
                    id = jTableNominaAdmin.getValueAt(filSelec, 0).toString();
                    //llamo el metodo eliminar
                    eliminado = miCliente.eliminarCuentaNomina(id);

                    DefaultTableModel dtm = (DefaultTableModel) jTableNominaAdmin.getModel();
                    dtm.removeRow(filSelec);

                    if (eliminado == true) {
                        JOptionPane.showMessageDialog(null, "La cuenta se elimino correctamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error!!! no se elimino");
                    }

                }
            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBEliminarCuentaNominaAdminActionPerformed

    private void jBEliminarCuentaCorrienteAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarCuentaCorrienteAdminActionPerformed
        // TODO add your handling code here:
        int filSelec;
        int resp;
        String id;
        boolean eliminado;
        try {
            //selecciono una fila
            filSelec = jTableCorrienteAdmin.getSelectedRow();
            //verifico si estoy seleccionando una fila
            if (filSelec == -1) {
                JOptionPane.showMessageDialog(null, "Debe seleccionar un item de la tabla corriente", "Advertencia", JOptionPane.WARNING_MESSAGE);
            } else {
                resp = JOptionPane.showConfirmDialog(null, "Esta seguro de eliminar esta cuenta (corriente)?", "Eliminar", JOptionPane.YES_NO_OPTION);
                if (resp == JOptionPane.YES_OPTION) {
                    //obtengo el los datos de la columna 0
                    id = jTableCorrienteAdmin.getValueAt(filSelec, 0).toString();
                    //llamo el metodo eliminar
                    eliminado = miCliente.eliminarCuentaCorriente(id);

                    DefaultTableModel dtm = (DefaultTableModel) jTableCorrienteAdmin.getModel();
                    dtm.removeRow(filSelec);

                    if (eliminado == true) {
                        JOptionPane.showMessageDialog(null, "La cuenta se elimino correctamente");
                    } else {
                        JOptionPane.showMessageDialog(null, "Error!!! no se elimino");
                    }

                }
            }
        } catch (Exception e) {
            Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_jBEliminarCuentaCorrienteAdminActionPerformed

    private void jTableAdminEmpresaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableAdminEmpresaMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableAdminEmpresaMouseClicked

    private void jBEliminarEmpresaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBEliminarEmpresaAdminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBEliminarEmpresaAdminActionPerformed

    private void jBCrearEmpresaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBCrearEmpresaAdminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBCrearEmpresaAdminActionPerformed

    private void jBModificarEmpresaAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBModificarEmpresaAdminActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jBModificarEmpresaAdminActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaAdmin(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBCrearCDTAdmin;
    private javax.swing.JButton jBCrearClienteAdmin;
    private javax.swing.JButton jBCrearCuentaAdm;
    private javax.swing.JButton jBCrearEmpresaAdmin;
    private javax.swing.JButton jBEliminarCDTAdmin;
    private javax.swing.JButton jBEliminarCliente;
    private javax.swing.JButton jBEliminarCuentaAhorroAdmin;
    private javax.swing.JButton jBEliminarCuentaCorrienteAdmin;
    private javax.swing.JButton jBEliminarCuentaNominaAdmin;
    private javax.swing.JButton jBEliminarEmpresaAdmin;
    private javax.swing.JButton jBModificarClienteAdmin;
    private javax.swing.JButton jBModificarCuentaAhorroAdmin;
    private javax.swing.JButton jBModificarCuentaCDTAdmin;
    private javax.swing.JButton jBModificarCuentaCorrienteAdmin;
    private javax.swing.JButton jBModificarCuentaNominaAdmin;
    private javax.swing.JButton jBModificarEmpresaAdmin;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTable jTableAdminClientes;
    private javax.swing.JTable jTableAdminEmpresa;
    public static javax.swing.JTable jTableAhorroAdmin;
    public static javax.swing.JTable jTableCDTAdmin;
    public static javax.swing.JTable jTableCorrienteAdmin;
    public static javax.swing.JTable jTableNominaAdmin;
    public static javax.swing.JTable jTableNominaAdmin1;
    // End of variables declaration//GEN-END:variables
    public void llenarTablaClienteAdmin() {
        DefaultTableModel dtm = (DefaultTableModel) jTableAdminClientes.getModel();//se usa DefaultTableModel para manipular facilmente el Tablemodel
        dtm.setRowCount(0);//eliminando la s filas que ya hay. para agregar desde el principio.
        //los datos se agregan la defaultTableModel.

        ArrayList<Cliente> clientes = miBanco.getClientes();//sacando al informacion a agregar en la tabla.

        //como se va a llenar una tabla de 5 columnas, se crea un vector de 3 elementos.
        //se usa un arreglo de Object para poder agregar a la tabla cualquier tipo de datos.
        Object[] datos = new Object[11];

        for (Cliente cliente : clientes) {
            if (cliente != null) {
                datos[0] = cliente.getCedula();
                datos[1] = cliente.getUsuario();
                datos[2] = cliente.getPreguntaSeguridad();
                datos[3] = cliente.getRespuesta();
                datos[4] = cliente.getPermisos();
                datos[5] = cliente.getNombres();
                datos[6] = cliente.getApellidos();
                datos[7] = cliente.getEdad();
                datos[8] = cliente.getSexo();
                datos[9] = cliente.getEmail();
                datos[10] = cliente.getFechaCumpleanios();

                dtm.addRow(datos);
            }
        }
        //metodo que modifica las celdas de la tabla
        dtm.addTableModelListener(new TableModelListener() {
            //metodo que verifica si existe un cambio en la tabla

            @Override
            public void tableChanged(TableModelEvent e) {
                //if que verifica si existe cambio
                if (e.getType() == TableModelEvent.UPDATE) {
                    //se obtiene la columna en la cual se modifico la celda
                    int columna = e.getColumn();
                    //se obtiene la dila en la cual se modifico la celda
                    int fila = e.getFirstRow();
                    //se obtiene el id del jugador de la fila seleccionada 
                    String id = jTableAdminClientes.getValueAt(fila, 0).toString();
                    //se obtiene el elemento modificado
                    String dato = jTableAdminClientes.getValueAt(fila, columna).toString();

                    try {
                        miBanco.modificarCliente(id, dato, columna);
//                    clienteSesion.modificarCliente(id, dato, columna);
                    } catch (ParseException ex) {
                        Logger.getLogger(VentanaAdmin.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }

        });
        //**************************************************

    }

    public void llenarTablaAhorroAdmin(Cliente cliente) {
        DefaultTableModel dtm = (DefaultTableModel) jTableAhorroAdmin.getModel();//se usa DefaultTableModel para manipular facilmente el Tablemodel
        dtm.setRowCount(0);//eliminando la s filas que ya hay. para agregar desde el principio.
        //los datos se agregan la defaultTableModel.

        ArrayList<Ahorro> ahorros = cliente.getAhorros();//sacando al informacion a agregar en la tabla.

        //como se va a llenar una tabla de 5 columnas, se crea un vector de 3 elementos.
        //se usa un arreglo de Object para poder agregar a la tabla cualquier tipo de datos.
        Object[] datos = new Object[4];

        for (Ahorro ahorro : ahorros) {
            if (ahorro != null) {
                datos[0] = ahorro.getNumeroBancario();
                datos[1] = ahorro.getMonto();
                datos[2] = ahorro.getFechaRetiroAhorros();
                datos[3] = ahorro.getFechaCreacion();

                dtm.addRow(datos);
            }
        }
//        //metodo que modifica las celdas de la tabla
//        dtm.addTableModelListener(new TableModelListener() {
//            //metodo que verifica si existe un cambio en la tabla
//
//            @Override
//            public void tableChanged(TableModelEvent e) {
//                //if que verifica si existe cambio
//                if (e.getType() == TableModelEvent.UPDATE) {
//                    //se obtiene la columna en la cual se modifico la celda
//                    int columna = e.getColumn();
//                    //se obtiene la dila en la cual se modifico la celda
//                    int fila = e.getFirstRow();
//                    //se obtiene el id del jugador de la fila seleccionada 
//                    String id = jTableAhorro.getValueAt(fila, 0).toString();
//                    //se obtiene el elemento modificado
//                    String dato = jTableAhorro.getValueAt(fila, columna).toString();
//
//                    clienteSesion.modificarAhorro(id, dato, columna);
//                }
//            }
//
//        });
//        //**************************************************

    }

    public void llenarTablaCorrienteAdmin(Cliente cliente) {
        DefaultTableModel dtm = (DefaultTableModel) jTableCorrienteAdmin.getModel();//se usa DefaultTableModel para manipular facilmente el Tablemodel
        dtm.setRowCount(0);//eliminando la s filas que ya hay. para agregar desde el principio.
        //los datos se agregan la defaultTableModel.

        ArrayList<Corriente> corrientes = cliente.getCorrientes();//sacando al informacion a agregar en la tabla.

        //como se va a llenar una tabla de 5 columnas, se crea un vector de 3 elementos.
        //se usa un arreglo de Object para poder agregar a la tabla cualquier tipo de datos.
        Object[] datos = new Object[3];

        for (Corriente corriente : corrientes) {
            if (corriente != null) {
                datos[0] = corriente.getNumeroBancario();
                datos[1] = corriente.getMonto();
                datos[2] = corriente.getFechaCreacion();

                dtm.addRow(datos);
            }
        }
//        //metodo que modifica las celdas de la tabla
//        dtm.addTableModelListener(new TableModelListener() {
//            //metodo que verifica si existe un cambio en la tabla
//
//            @Override
//            public void tableChanged(TableModelEvent e) {
//                //if que verifica si existe cambio
//                if (e.getType() == TableModelEvent.UPDATE) {
//                    //se obtiene la columna en la cual se modifico la celda
//                    int columna = e.getColumn();
//                    //se obtiene la dila en la cual se modifico la celda
//                    int fila = e.getFirstRow();
//                    //se obtiene el id del jugador de la fila seleccionada 
//                    String id = jTableCorriente.getValueAt(fila, 0).toString();
//                    //se obtiene el elemento modificado
//                    String dato = jTableCorriente.getValueAt(fila, columna).toString();
//
//                    clienteSesion.modificarCorriente(id, dato, columna);
//                }
//            }
//
//        });
//        //**************************************************

    }

    /**
     *
     */
    public void llenarTablaNominaAdmin(Cliente cliente) {
        DefaultTableModel dtm = (DefaultTableModel) jTableNominaAdmin.getModel();//se usa DefaultTableModel para manipular facilmente el Tablemodel
        dtm.setRowCount(0);//eliminando la s filas que ya hay. para agregar desde el principio.
        //los datos se agregan la defaultTableModel.

        ArrayList<Nomina> nominas = cliente.getNominasCliente();//sacando al informacion a agregar en la tabla.

        //como se va a llenar una tabla de 5 columnas, se crea un vector de 3 elementos.
        //se usa un arreglo de Object para poder agregar a la tabla cualquier tipo de datos.
        Object[] datos = new Object[4];

        for (Nomina nomina : nominas) {
            if (nomina != null) {
                datos[0] = nomina.getNumeroBancario();
                datos[1] = nomina.getMonto();
                datos[2] = nomina.getEmpresa().getRazonSocial();
                datos[3] = nomina.getFechaCreacion();

                dtm.addRow(datos);
            }
        }
//        //metodo que modifica las celdas de la tabla
//        dtm.addTableModelListener(new TableModelListener() {
//            //metodo que verifica si existe un cambio en la tabla
//
//            @Override
//            public void tableChanged(TableModelEvent e) {
//                //if que verifica si existe cambio
//                if (e.getType() == TableModelEvent.UPDATE) {
//                    //se obtiene la columna en la cual se modifico la celda
//                    int columna = e.getColumn();
//                    //se obtiene la dila en la cual se modifico la celda
//                    int fila = e.getFirstRow();
//                    //se obtiene el id del jugador de la fila seleccionada 
//                    String id = jTableCDT.getValueAt(fila, 0).toString();
//                    //se obtiene el elemento modificado
//                    String dato = jTableCDT.getValueAt(fila, columna).toString();
//
//                    clienteSesion.modificarCDT(id, dato, columna);
//                }
//            }
//
//        });
//        //**************************************************

    }

    public void llenarTablaCDTAdmin(Cliente cliente) {
        DefaultTableModel dtm = (DefaultTableModel) jTableCDTAdmin.getModel();//se usa DefaultTableModel para manipular facilmente el Tablemodel
        dtm.setRowCount(0);//eliminando la s filas que ya hay. para agregar desde el principio.
        //los datos se agregan la defaultTableModel.

        ArrayList<CDTs> cdts = cliente.getCdts();//sacando al informacion a agregar en la tabla.

        //como se va a llenar una tabla de 5 columnas, se crea un vector de 3 elementos.
        //se usa un arreglo de Object para poder agregar a la tabla cualquier tipo de datos.
        Object[] datos = new Object[5];

        for (CDTs cdt : cdts) {
            if (cdt != null) {
                datos[0] = cdt.getNumeroBancario();
                datos[1] = cdt.getMontoInversion();
                datos[2] = cdt.getPorcentajeInteresPagado();
                datos[3] = cdt.isPagoMensual();
                datos[4] = cdt.getFechaCreacion();

                dtm.addRow(datos);
            }
        }
//        //metodo que modifica las celdas de la tabla
//        dtm.addTableModelListener(new TableModelListener() {
//            //metodo que verifica si existe un cambio en la tabla
//
//            @Override
//            public void tableChanged(TableModelEvent e) {
//                //if que verifica si existe cambio
//                if (e.getType() == TableModelEvent.UPDATE) {
//                    //se obtiene la columna en la cual se modifico la celda
//                    int columna = e.getColumn();
//                    //se obtiene la dila en la cual se modifico la celda
//                    int fila = e.getFirstRow();
//                    //se obtiene el id del jugador de la fila seleccionada 
//                    String id = jTableCDT.getValueAt(fila, 0).toString();
//                    //se obtiene el elemento modificado
//                    String dato = jTableCDT.getValueAt(fila, columna).toString();
//
//                    clienteSesion.modificarCDT(id, dato, columna);
//                }
//            }
//
//        });
//        //**************************************************

    }

}
